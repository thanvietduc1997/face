{"version":3,"sources":["BO.jpeg","components/Header.js","components/Results.js","App.js","serviceWorker.js","index.js","mxnet-logo.svg"],"names":["module","exports","src","mxnetlogo","className","alt","props","id","message","results","map","face","key","face_token","face_attributes","gender","value","age","face_rectangle","left","top","width","height","head_pose","yaw_angle","toFixed","pitch_angle","roll_angle","renderPredictions","App","state","graphic","imagePlaceholder","analyzeFace","a","sleep","fetch","method","headers","body","JSON","stringify","image","split","then","res","json","console","log","setState","faces","setFile","file","reader","FileReader","onload","e","target","result","readAsDataURL","onDrop","accepted","rejected","length","window","alert","ms","Promise","resolve","setTimeout","Header","accept","this","bind","getRootProps","getInputProps","Results","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,iC,8OCG5B,oBACb,gCACE,yBAAKC,IAAKC,IAAWC,UAAU,WAAWC,IAAI,SAC9C,oDCuBW,WAACC,GAAD,OACb,yBAAKC,GAAG,WACN,2BAAID,EAAME,SA7BY,SAACF,GACzB,OACE,yBAAKC,GAAG,eACLD,EAAMG,QAAQC,KAAI,SAACC,GAAD,OACjB,yBAAKC,IAAKD,EAAKE,YACb,oCAAUF,EAAKE,YACf,4BACE,uCAAaF,EAAKG,gBAAgBC,OAAOC,OACzC,oCAAUL,EAAKG,gBAAgBG,IAAID,OACnC,iDACqBL,EAAKO,eAAeC,KADzC,OAEGR,EAAKO,eAAeE,IAFvB,WAEoCT,EAAKO,eAAeG,MAFxD,YAGUV,EAAKO,eAAeI,QAE9B,6CAEGX,EAAKG,gBAAgBS,UAAUC,UAAUC,QAAQ,GAFpD,WAGGd,EAAKG,gBAAgBS,UAAUG,YAAYD,QAAQ,GAHtD,UAIGd,EAAKG,gBAAgBS,UAAUI,WAAWF,QAAQ,UAY5DG,CAAkBtB,K,yBCqERuB,E,4MA1FbC,MAAQ,CACNC,QAASC,IACTvB,QAAS,GACTD,QAAS,S,EAMXyB,Y,sBAAc,sBAAAC,EAAA,sEACN,EAAKC,MAAM,KADL,OAEZC,MAAM,mCAAoC,CACxCC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,MAAO,EAAKZ,MAAMC,QAAQY,MAAM,KAAK,OAGtCC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GACLE,QAAQC,IAAIH,GACZ,EAAKI,SAAS,CACZxC,QAASoC,EAAIK,MACb1C,QAAS,gBAhBH,2C,EAqBd2C,QAAU,SAACC,GAET,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAACC,GACf,EAAKP,SAAS,CAAElB,QAASyB,EAAEC,OAAOC,QAAU,EAAKzB,cAGnDoB,EAAOM,cAAcP,I,EAGvBQ,OAAS,SAACC,EAAUC,GACdA,EAASC,OAAS,EACpBC,OAAOC,MAAM,qBAQb,EAAKd,QAAQU,EAAS,K,oDA5CpBK,GACJ,OAAO,IAAIC,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAASF,Q,+BA8C5C,IAAD,OACP,OACE,yBAAK9D,UAAU,OACb,kBAACkE,EAAD,MACA,8BACE,6BACE,yBAAK/D,GAAG,YACN,uBAAGA,GAAG,cAAN,mCAEF,kBAAC,IAAD,CACEA,GAAG,UACHgE,OAAO,wBACPnE,UAAU,YACVwD,OAAQY,KAAKZ,OAAOa,KAAKD,QAExB,gBAAGE,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,cAAjB,OACC,iCACE,wBAASD,IACP,0BAAWC,KACX,yBACEzE,IAAK,EAAK4B,MAAMC,QAChB1B,IAAI,sBACJD,UAAU,wBAQtB,kBAACwE,EAAD,CAASpE,QAASgE,KAAK1C,MAAMtB,QAASC,QAAS+D,KAAK1C,MAAMrB,gB,GApFlDoE,aCEEC,QACW,cAA7Bd,OAAOe,SAASC,UAEe,UAA7BhB,OAAOe,SAASC,UAEhBhB,OAAOe,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMrF,a,kBEzI5BR,EAAOC,QAAU,IAA0B,yC","file":"static/js/main.01204810.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/BO.1915932f.jpeg\";","import React from \"react\";\nimport mxnetlogo from \"../mxnet-logo.svg\";\n\nexport default () => (\n  <header>\n    <img src={mxnetlogo} className=\"App-logo\" alt=\"logo\" />\n    <h1>Face Analysis Demo</h1>\n  </header>\n);\n","import React from \"react\";\n\nconst renderPredictions = (props) => {\n  return (\n    <div id=\"predictions\">\n      {props.results.map((face) => (\n        <div key={face.face_token}>\n          <p>Face #{face.face_token}</p>\n          <ul>\n            <li>Gender: {face.face_attributes.gender.value}</li>\n            <li>Age: {face.face_attributes.age.value}</li>\n            <li>\n              Face rectangle: x={face.face_rectangle.left}, y=\n              {face.face_rectangle.top}, width={face.face_rectangle.width},\n              height={face.face_rectangle.height}\n            </li>\n            <li>\n              Headpose: yaw=\n              {face.face_attributes.head_pose.yaw_angle.toFixed(2)}, pitch=\n              {face.face_attributes.head_pose.pitch_angle.toFixed(2)}, roll=\n              {face.face_attributes.head_pose.roll_angle.toFixed(2)}\n            </li>\n          </ul>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default (props) => (\n  <div id=\"results\">\n    <p>{props.message}</p>\n    {renderPredictions(props)}\n  </div>\n);\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport Header from \"./components/Header\";\nimport Results from \"./components/Results\";\n\nimport Dropzone from \"react-dropzone\";\n\nimport imagePlaceholder from \"./BO.jpeg\";\n\nclass App extends Component {\n  state = {\n    graphic: imagePlaceholder,\n    results: [],\n    message: \"Ready\",\n  };\n  // terrible race condition fix :'(\n  sleep(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n  analyzeFace = async () => {\n    await this.sleep(100);\n    fetch(\"http://58c86926a98e.ngrok.io/api\", {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        image: this.state.graphic.split(\",\")[1],\n      }),\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        console.log(res);\n        this.setState({\n          results: res.faces,\n          message: \"Results:\",\n        });\n      });\n  };\n\n  setFile = (file) => {\n    // drag and dropped\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      this.setState({ graphic: e.target.result }, this.analyzeFace);\n    };\n\n    reader.readAsDataURL(file);\n  };\n\n  onDrop = (accepted, rejected) => {\n    if (rejected.length > 0) {\n      window.alert(\"JPG, PNG only plz\");\n    } else {\n      // let droppedImageStyle = this.state.blurNSFW ? blurred : clean;\n      // this.setState({\n      //   message: \"Processing...\",\n      //   droppedImageStyle,\n      //   hardReset: true,\n      // });\n      this.setFile(accepted[0]);\n    }\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <main>\n          <div>\n            <div id=\"overDrop\">\n              <p id=\"topMessage\">Select or Drop your image here</p>\n            </div>\n            <Dropzone\n              id=\"dropBox\"\n              accept=\"image/jpeg, image/png\"\n              className=\"photo-box\"\n              onDrop={this.onDrop.bind(this)}\n            >\n              {({ getRootProps, getInputProps }) => (\n                <section>\n                  <div {...getRootProps()}>\n                    <input {...getInputProps()} />\n                    <img\n                      src={this.state.graphic}\n                      alt=\"drop your file here\"\n                      className=\"dropped-photo\"\n                      // ref=\"dropped\"\n                    />\n                  </div>\n                </section>\n              )}\n            </Dropzone>\n          </div>\n          <Results message={this.state.message} results={this.state.results} />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/mxnet-logo.c44482b0.svg\";"],"sourceRoot":""}